// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
   // creat a zero
    Not16(in=x , out=notx );
    Add16(a =x , b =notx , out =allone );
    Inc16(in=allone , out=zero );
     //set the x to zero if (zx==1) 
    Mux16(a=x , b=zero , sel=zx , out=newx1 );  
    
    //bitwise not on X if (nx==1)
    Not16(in=newx1 , out=bwx ); 
    Mux16(a=newx1 , b=bwx , sel=nx , out=newx2 );     

    //set the y to zero if (zy==1)
    Mux16(a=y , b=zero , sel=zy , out=newy1 ); 

    //bitwise not on Y if (ny==1)
    Not16(in=newy1 , out=bwy ); 
    Mux16(a=newy1 , b=bwy , sel=ny , out=newy2 );
    
    // x+y
    Add16(a =newx2 , b =newy2 , out =XplusY); 
         
    // x&y
    And16(a =newx2 , b =newy2 , out =XbitY); 
    
    Mux16(a= XbitY, b=XplusY , sel=f , out=out1 );
    Not16(in=out1 , out=notout1 );
    
    //choos the correct output with 'no'
    //split the out put for two 8-bit constant
    //check the last digit -and set ng 
    Mux16(a= out1 , b=notout1 , sel=no , out=out ,out[0..7]=rightout ,out[8..15] = leftout ,out[15]=ng );

    //check if both sides are zero     
    Or8Way(in=rightout, out=ROiszero );
    Or8Way(in=leftout, out=LOiszero );   
    Or(a=ROiszero , b= LOiszero , out= T1 );
    Not(in=T1 , out=zr );

    //ng 

        

   
    
}