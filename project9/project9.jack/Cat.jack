class Cat {
    field int x;
    field int y;
    field boolean catchStatus;

    constructor Cat new(int Ax , int Ay) {
        /* the x, y will be the place on the map */
        let x = Ax;
        let y = Ay;
        let catchStatus=false;
        do draw_Cat(x, y);
        return this;
    }
    method int get_x() {
    return x;
    }
    method int get_y() {
    return y;
    }
    method boolean get_CatchStatus()
    {
        return catchStatus;
    }
    method void set_CatchStatus()
    {
        let catchStatus=true;
        return;
    }

    method void catch_Cat()
    {
    do move_up_Cat();
    do move_left_Cat();
    do move_down_Cat();
    return;
    }
    method void move_up_Cat() {
        
            do delete_Cat(x, y); 
            let y = y - 2;  
            do draw_Cat(x, y);
            do Sys.wait(10);
        return;
    }
    method void move_down_Cat() {
        var Game game;
        if (y < 220) 
        { 
            do delete_Cat(x, y); 
            let y = y + 2;  
            do draw_Cat(x, y);
            do Sys.wait(10);
        }
        else
        {
        do delete_Cat(x, y);
        let y = y + 2;
        let game=Game.new(0,235);
        do game.move_up_Ten();
        }
        return;
    }
    method void move_left_Cat() {
        
        do delete_Cat(x, y); 
        let x = x - 1;  
        do draw_Cat(x, y); 
        do Sys.wait(30);
        return;
    }

    method void draw_Cat(int Ax, int Ay) {
    var int memAddress; 
    let memAddress = 16384 + (Ay * 32) + Ax;

    // column 0
    do Memory.poke(memAddress, 128);
    do Memory.poke(memAddress + 32, 320);
    do Memory.poke(memAddress + 64, -32064);
    do Memory.poke(memAddress + 96, 31968);
    do Memory.poke(memAddress + 128, 32);
    do Memory.poke(memAddress + 160, 16);
    do Memory.poke(memAddress + 192, 18);
    do Memory.poke(memAddress + 224, 276);
    do Memory.poke(memAddress + 256, 392);
    do Memory.poke(memAddress + 288, 14360);
    do Memory.poke(memAddress + 320, 4111);
    do Memory.poke(memAddress + 352, -28136);
    do Memory.poke(memAddress + 384, 27656);
    do Memory.poke(memAddress + 416, 20);
    do Memory.poke(memAddress + 448, 50);
    do Memory.poke(memAddress + 480, -31776);
    do Memory.poke(memAddress + 512, -512);

    // column 1
    do Memory.poke(memAddress + 1, 2);
    do Memory.poke(memAddress + 33, 5);
    do Memory.poke(memAddress + 65, 6);
    do Memory.poke(memAddress + 97, 14);
    do Memory.poke(memAddress + 129, 8);
    do Memory.poke(memAddress + 161, 16);
    do Memory.poke(memAddress + 193, 144);
    do Memory.poke(memAddress + 225, 82);
    do Memory.poke(memAddress + 257, 35);
    do Memory.poke(memAddress + 289, 48);
    do Memory.poke(memAddress + 321, 480);
    do Memory.poke(memAddress + 353, 48);
    do Memory.poke(memAddress + 385, 32);
    do Memory.poke(memAddress + 417, 80);
    do Memory.poke(memAddress + 449, 152);
    do Memory.poke(memAddress + 481, 15);

    return;
    }
    method void delete_Cat(int Ax, int Ay) {
        var int memAddress; 
        let memAddress = 16384 + (Ay * 32) + Ax;

        // column 0 (deleting by setting values to 0)
        do Memory.poke(memAddress, 0);
        do Memory.poke(memAddress + 32, 0);
        do Memory.poke(memAddress + 64, 0);
        do Memory.poke(memAddress + 96, 0);
        do Memory.poke(memAddress + 128, 0);
        do Memory.poke(memAddress + 160, 0);
        do Memory.poke(memAddress + 192, 0);
        do Memory.poke(memAddress + 224, 0);
        do Memory.poke(memAddress + 256, 0);
        do Memory.poke(memAddress + 288, 0);
        do Memory.poke(memAddress + 320, 0);
        do Memory.poke(memAddress + 352, 0);
        do Memory.poke(memAddress + 384, 0);
        do Memory.poke(memAddress + 416, 0);
        do Memory.poke(memAddress + 448, 0);
        do Memory.poke(memAddress + 480, 0);
        do Memory.poke(memAddress + 512, 0);

        // column 1 (deleting by setting values to 0)
        do Memory.poke(memAddress + 1, 0);
        do Memory.poke(memAddress + 33, 0);
        do Memory.poke(memAddress + 65, 0);
        do Memory.poke(memAddress + 97, 0);
        do Memory.poke(memAddress + 129, 0);
        do Memory.poke(memAddress + 161, 0);
        do Memory.poke(memAddress + 193, 0);
        do Memory.poke(memAddress + 225, 0);
        do Memory.poke(memAddress + 257, 0);
        do Memory.poke(memAddress + 289, 0);
        do Memory.poke(memAddress + 321, 0);
        do Memory.poke(memAddress + 353, 0);
        do Memory.poke(memAddress + 385, 0);
        do Memory.poke(memAddress + 417, 0);
        do Memory.poke(memAddress + 449, 0);
        do Memory.poke(memAddress + 481, 0);

        return;
    }
}
