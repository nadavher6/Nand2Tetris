class Pap {
    field int x;
    field int y;
    field int catchStatus;

    constructor Pap new(int Ax , int Ay) {
        /* the x, y will be the place on the map */
        let x = Ax;
        let y = Ay;
        do draw_Pap(x, y);
        return this;
    }

    method void catch_Pap()
    {
    do move_up();
    do move_left();
    return;
    }
    method void move_up() {
        while (y > 0) 
        { 
            do delete_Pap(x, y); 
            let y = y - 2;  
            do draw_Pap(x, y);
            do Sys.wait(10);
        }
        return;
    }
    method void move_left() {
        while (x > 0) 
        { 
            do delete_Pap(x, y); 
            let x = x - 1;  
            do draw_Pap(x, y); 
            do Sys.wait(30);
        }
        return;
    }
    method void delete_Pap(int x, int y) {
    var int memAddress;
    let memAddress = 16384 + (y * 32) + x;

    // Clear column 0
    do Memory.poke(memAddress, 0);
    do Memory.poke(memAddress + 32, 0);
    do Memory.poke(memAddress + 64, 0);
    do Memory.poke(memAddress + 96, 0);
    do Memory.poke(memAddress + 128, 0);
    do Memory.poke(memAddress + 160, 0);
    do Memory.poke(memAddress + 192, 0);
    do Memory.poke(memAddress + 224, 0);
    do Memory.poke(memAddress + 256, 0);
    do Memory.poke(memAddress + 288, 0);
    do Memory.poke(memAddress + 320, 0);
    do Memory.poke(memAddress + 352, 0);
    do Memory.poke(memAddress + 384, 0);
    do Memory.poke(memAddress + 416, 0);
    do Memory.poke(memAddress + 448, 0);
    do Memory.poke(memAddress + 480, 0);

    // Clear column 1
    do Memory.poke(memAddress + 1, 0);
    do Memory.poke(memAddress + 33, 0);
    do Memory.poke(memAddress + 65, 0);
    do Memory.poke(memAddress + 97, 0);
    do Memory.poke(memAddress + 129, 0);
    do Memory.poke(memAddress + 161, 0);
    do Memory.poke(memAddress + 193, 0);
    do Memory.poke(memAddress + 225, 0);
    do Memory.poke(memAddress + 257, 0);
    do Memory.poke(memAddress + 289, 0);
    do Memory.poke(memAddress + 321, 0);
    do Memory.poke(memAddress + 353, 0);
    do Memory.poke(memAddress + 385, 0);

    return;
}


    method void draw_Pap(int drawX, int drawY) {
        var int memAddress;
        let memAddress = 16384 + (drawY * 32) + drawX;

        // column 0
        do Memory.poke(memAddress, 7);
        do Memory.poke(memAddress + 32, 9);
        do Memory.poke(memAddress + 64, 32722);
        do Memory.poke(memAddress + 96, -16268);
        do Memory.poke(memAddress + 128, 24);
        do Memory.poke(memAddress + 160, 8);
        do Memory.poke(memAddress + 192, 12684);
        do Memory.poke(memAddress + 224, 12676);
        do Memory.poke(memAddress + 256, 4);
        do Memory.poke(memAddress + 288, 1032);
        do Memory.poke(memAddress + 320, 8);
        do Memory.poke(memAddress + 352, 3592);
        do Memory.poke(memAddress + 384, -29128);
        do Memory.poke(memAddress + 416, -16288);
        do Memory.poke(memAddress + 448, 29120);
        do Memory.poke(memAddress + 480, 3584);

        // column 1
        do Memory.poke(memAddress + 1, 28);
        do Memory.poke(memAddress + 33, 18);
        do Memory.poke(memAddress + 65, 9);
        do Memory.poke(memAddress + 97, 5);
        do Memory.poke(memAddress + 129, 3);
        do Memory.poke(memAddress + 161, 2);
        do Memory.poke(memAddress + 193, 6);
        do Memory.poke(memAddress + 225, 4);
        do Memory.poke(memAddress + 257, 4);
        do Memory.poke(memAddress + 289, 2);
        do Memory.poke(memAddress + 321, 2);
        do Memory.poke(memAddress + 353, 2);
        do Memory.poke(memAddress + 385, 3);

        return;
    }
}
